[{"/Users/tom/Desktop/testApp/client/src/index.js":"1","/Users/tom/Desktop/testApp/client/src/App.js":"2","/Users/tom/Desktop/testApp/client/src/reportWebVitals.js":"3","/Users/tom/Documents/GitHub/mongoDB-Test/testApp/client/src/index.js":"4","/Users/tom/Documents/GitHub/mongoDB-Test/testApp/client/src/reportWebVitals.js":"5","/Users/tom/Documents/GitHub/mongoDB-Test/testApp/client/src/App.js":"6"},{"size":500,"mtime":1649085395219,"results":"7","hashOfConfig":"8"},{"size":530,"mtime":1649183180420,"results":"9","hashOfConfig":"8"},{"size":362,"mtime":1649085395220,"results":"10","hashOfConfig":"8"},{"size":500,"mtime":1649085395219,"results":"11","hashOfConfig":"12"},{"size":362,"mtime":1649085395220,"results":"13","hashOfConfig":"12"},{"size":2131,"mtime":1649430239935,"results":"14","hashOfConfig":"12"},{"filePath":"15","messages":"16","suppressedMessages":"17","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1ynobim",{"filePath":"18","messages":"19","suppressedMessages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"21","messages":"22","suppressedMessages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"24","messages":"25","suppressedMessages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"bqgj9",{"filePath":"27","messages":"28","suppressedMessages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","suppressedMessages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33"},"/Users/tom/Desktop/testApp/client/src/index.js",[],[],"/Users/tom/Desktop/testApp/client/src/App.js",[],[],"/Users/tom/Desktop/testApp/client/src/reportWebVitals.js",[],[],"/Users/tom/Documents/GitHub/mongoDB-Test/testApp/client/src/index.js",[],[],"/Users/tom/Documents/GitHub/mongoDB-Test/testApp/client/src/reportWebVitals.js",[],[],"/Users/tom/Documents/GitHub/mongoDB-Test/testApp/client/src/App.js",["34"],[],"import React from 'react';\nimport axios from 'axios';\n//function App() {\nclass App extends React.Component{\n  state = {\n    title: '',\n    body:  '',\n    posts: []\n  };\n\n  componentDidMount = () => {\n    this.getBlogPost();\n  }\n\n  getBlogPost = () => {\n    axios.get('/api')\n    .then((response) => {\n      const data = response.data;\n      this.setState({posts: data});\n      console.log('data has been recieved');\n    })\n    .catch(() => {\n      console.log('data was not recieved');\n    });\n  }\n\n  handleChange = ({ target}) => {\n    const {name, value} = target;\n    this.setState({ [name]: value });\n  };\n\n  submit = (event) => {\n    event.preventDefault();\n    const payload = {\n      title: this.state.title,\n      body: this.state.body\n    };\n\n    axios({\n      url: '/api/save',\n      method: 'POST',\n      data: payload\n    })\n    .then(() => {\n      console.log('data has been sent');\n      this.resetUserInputs();\n      this.getBlogPost();\n    })\n    .catch(() => {\n      console.log('server error');\n    });;\n  };\n\n  resetUserInputs = () => {\n    this.setState({\n      title: '',\n      body: ''\n    })\n  }\n\ndisplayBlogPost = (posts) => {\n  if (!posts.length) return null;\n\n  return posts.map((post, index) => {\n    <div key={index}>\n      <h3>{post.title}</h3>\n      <p>{post.body}</p>\n    </div>\n  })\n}\n\nrender(){\n\n  console.log('State: ',this.state );\n  return (\n    <div>\n      <h2>Welcome to my App</h2>\n      <form onSubmit={this.submit}>\n        <div className=\"form-input\">\n          <input\n            type=\"text\"\n            name=\"title\"\n            placeholder='enter title'\n            value={this.state.title}\n            onChange={this.handleChange}\n            />\n        </div>\n        <div className='form-input'>\n          <textarea \n          placeholder='body' \n          name=\"body\" cols=\"30\" \n          rows=\"10\" \n          value={this.state.body} \n          onChange={this.handleChange}></textarea>\n        </div>\n        <button>Submit</button>\n      </form>\n      <div className='blog-post'>\n        {this.displayBlogPost(this.state.posts)}\n      </div>\n    </div>\n  );\n}\n}\nexport default App;\n",{"ruleId":"35","severity":1,"message":"36","line":64,"column":34,"nodeType":"37","messageId":"38","endLine":64,"endColumn":36},"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside"]